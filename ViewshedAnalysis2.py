# ---------------------------------------------------------------------------
# viewshedanalysis.py
# Created on: Wed Jan 05 2011 02:55:11 PM
#   (generated by ArcGIS/ModelBuilder)
# ---------------------------------------------------------------------------

# Import system modules
import sys, string, os, arcgisscripting, shutil

def cleanup():
    print "Cleaning files..."
    try:
        shutil.rmtree("C:\\Viewshed\\tempprocessing2")
        os.mkdir("C:\\Viewshed\\tempprocessing2")
    except:
        print "did not remove anything"
        os.mkdir("C:\\Viewshed\\tempprocessing2")
    



# Create the Geoprocessor object
gp = arcgisscripting.create()

# Check out any necessary licenses
gp.CheckOutExtension("3D")
gp.CheckOutExtension("spatial")

# Load required toolboxes...
gp.AddToolbox("C:/Program Files (x86)/ArcGIS/ArcToolbox/Toolboxes/Spatial Analyst Tools.tbx")
gp.AddToolbox("C:/Program Files (x86)/ArcGIS/ArcToolbox/Toolboxes/3D Analyst Tools.tbx")
gp.AddToolbox("C:/Program Files (x86)/ArcGIS/ArcToolbox/Toolboxes/Data Management Tools.tbx")
gp.AddToolbox("C:/Program Files (x86)/ArcGIS/ArcToolbox/Toolboxes/Analysis Tools.tbx")
gp.AddToolbox("C:/Program Files (x86)/ArcGIS/ArcToolbox/Toolboxes/Conversion Tools.tbx")



#STATIC FILES
demfile_tif = "C:\\Viewshed\\inputfiles2\\Lidar_DEM_final.img"
observerpoints_shp = "C:\\Viewshed\\1000observers2.shp"
uglyplacesfile = "C:\\Viewshed\\inputfiles2\\UglyPlaces_Polygons_NEOH.shp"
transmission_buffer = "C:\\Viewshed\\inputfiles2\\transmissionlines_buffer.shp"
#TEMP FILES
viewshedoutput = "C:\\Viewshed\\tempprocessing2\\viewshedoutput2.img"
clipoutput = "C:\\Viewshed\\tempprocessing2\\clipoutput2.tif"
viewshedpolygon = "C:\\Viewshed\\tempprocessing2\\viewshedpolygon2.shp"
temppointfile = "C:\\Viewshed\\inputfiles2\\temppoint.shp"
goodviewshedouput = "C:\\Viewshed\\tempprocessing2\\goodviewshedoutput2.tif"






cleanup()

#CLIPRADIUS = 26000 # about 5 miles
CLIPRADIUS = 26000
UGLYFACTOR = 3
TRANSFACTOR = 2
PROTECTEDFACTOR = 3
TREEFACTOR = 2



thecursor = gp.UpdateCursor(observerpoints_shp)

temprow = thecursor.Next()


pointcount = 1
OUTPUT = "C:\\viewshed\\runfile2.txt"
myfile = open(OUTPUT,'w')

while (temprow):

    tempshape = temprow.shape

    temppointcursor = gp.UpdateCursor(temppointfile)
    temppointpoint = gp.createobject('Point')
    temppointpoint.x = tempshape.getpart(0).x
    temppointpoint.y = tempshape.getpart(0).y

    temppointshape = temppointcursor.Next()
    temppointshape.Shape = temppointpoint
    temppointcursor.updaterow(temppointshape)
    
    if (str(temprow.GetValue('Value')) == "0.0" or str(temprow.GetValue('Value')) == "0" or temprow.GetValue('Value') == 0):
        
        myfile.write("\n\n*******************************************************\n")
        try:
            extentstring = str(temppointpoint.x - CLIPRADIUS)  + " " + str(temppointpoint.y - CLIPRADIUS) + " " + str(temppointpoint.x + CLIPRADIUS) + " " + str(temppointpoint.y + CLIPRADIUS)
            #extentstring = "2236851 512934 2239058 518187"
            #Clip "D:\GIS Base Data\OH Northeast Clipped\Lidar DEM\Lidar_DEM_final.img" "4622240 513548 4674240 565548" "D:\GIS Base Data\OH Northeast Clipped\Lidar DEM\Lidar_DEM_final_Clip.img" # # NONE
            myfile.write("Clipping for point: " + str(pointcount) + " with the extent " + str(extentstring))
            try:
                gp.Clip_management(demfile_tif, extentstring, clipoutput, "", "", "NONE")
            except:
                myfile.write(str(gp.GetMessages()))



            myfile.write("Running viewshed analysis on point: " + str(pointcount))
            gp.Viewshed_3d(clipoutput, temppointfile, viewshedoutput, "1", "CURVED_EARTH", "2.2251784323663E-306")

            gp.ExtractByAttributes_sa(viewshedoutput, "\"VALUE\" = 1", goodviewshedouput)




            myfile.write("Running viewshed to polygon analysis on point: " + str(pointcount))
            gp.RasterToPolygon_conversion(goodviewshedouput, viewshedpolygon, "SIMPLIFY", "VALUE")

            #This will be our starting value
            viewpolycursor = gp.SearchCursor(viewshedpolygon)
            thevalue = 0
            thevaluerow = viewpolycursor.Next()
            while (thevaluerow):
                thevalue += thevaluerow.Shape.Area
                thevaluerow = viewpolycursor.Next()
            myfile.write("Here is my area for the viewshed and the starting value " + str(thevalue))



            #subtract the values of the ugly places
            uglyintersect = "C:\\Viewshed\\tempprocessing2\\uglyinterest2.shp"
            try:
                gp.Intersect_analysis("'" + uglyplacesfile + "' #;'" + viewshedpolygon + "' #",  uglyintersect, "ALL", "", "INPUT")
                uglycursor = gp.SearchCursor(uglyintersect)
                uglyrow = uglycursor.Next()
                deletevalue = 0
                while (uglyrow):
                    deletevalue += uglyrow.Shape.Area*UGLYFACTOR
                    thevalue = thevalue - (uglyrow.Shape.Area*UGLYFACTOR)
                    uglyrow = uglycursor.Next()
                    
                myfile.write("Subtracted " + str(deletevalue) + " from the value for ugly places")    
                del uglycursor, uglyrow
            except:
                myfile.write("!!!!!!Failed to run ugly\n")
                myfile.write(str(gp.GetMessages()))




            #subtract when powerlines are there
            #This was done with a 300ft buffer on the transmission lines
            transmissionintersect = "C:\\Viewshed\\tempprocessing2\\powerinterect2.shp"
            try:
                gp.Intersect_analysis("'" + transmission_buffer + "' #;'" + viewshedpolygon + "' #",  transmissionintersect, "ALL", "", "INPUT")
                transcursor = gp.SearchCursor(transmissionintersect)
                transrow = transcursor.Next()
                deletevalue = 0
                while (transrow):
                    deletevalue += transrow.Shape.Area*TRANSFACTOR
                    thevalue = thevalue - (transrow.Shape.Area*TRANSFACTOR) #Could multiply a factor here if it is too small
                    transrow = transcursor.Next()
                    
                myfile.write("Subtracted " + str(deletevalue) + " from the value for transmission lines")
                del transcursor, transrow
            except:
                myfile.write("!!!!!!Failed to run transmission\n")
                myfile.write(str(gp.GetMessages()))

            #subtract when developed with NASS data
            developedlands = "C:\\Viewshed\\inputfiles2\\NASS_Developed.shp"
            tempdevelopedlands = "C:\\Viewshed\\tempprocessing2\\developedlandstemp2.shp"
            try:
                gp.Intersect_analysis("'" + developedlands + "' #;'" + viewshedpolygon + "' #",  tempdevelopedlands, "ALL", "", "INPUT")
                developedcursor = gp.SearchCursor(tempdevelopedlands)
                developedrow = developedcursor.Next()
                deletevalue = 0
                while (developedrow):
                    deletevalue += developedrow.Shape.Area
                    thevalue = thevalue - (developedrow.Shape.Area) #Could multiply a factor here if it is too small
                    developedrow = developedcursor.Next()
                    
                myfile.write("Subtracted " + str(deletevalue) + " from the value for Developed land")
                del developedcursor, developedrow   
            except:
                myfile.write("!!!!!!Failed to run developedlands\n")
                myfile.write(str(gp.GetMessages()))


            #add when trees or other speciality crops
            treelands = "C:\\Viewshed\\inputfiles2\\NASS_SpecialtyCrops.shp"
            temptreelands = "C:\\Viewshed\\tempprocessing2\\treelandstemp2.shp"
            try:
                gp.Intersect_analysis("'" + treelands + "' #;'" + viewshedpolygon + "' #",  temptreelands, "ALL", "", "INPUT")
                treecursor = gp.SearchCursor(temptreelands)
                treerow = treecursor.Next()
                deletevalue = 0
                while (treerow):
                    deletevalue += treerow.Shape.Area*TREEFACTOR
                    thevalue = thevalue + (treerow.Shape.Area*TREEFACTOR) #Could multiply a factor here if it is too small
                    treerow = treecursor.Next()
                    
                myfile.write("Add " + str(deletevalue) + " from the value for trees and speciality crops")
                del treecursor, treerow    
            except:
                myfile.write("!!!!!!Failed to run treelands\n")
                myfile.write(str(gp.GetMessages()))


            #keep the same for corn and soybeans
            #nothing happens with the corn or soybeans


            #Add the values of protected places
            protectedlands = "C:\\Viewshed\\inputfiles2\\Protected_Lands.shp"
            tempprotectedlands = "C:\\Viewshed\\tempprocessing2\\protectedlandstemp2.shp"
            try:
                gp.Intersect_analysis("'" + protectedlands + "' #;'" + viewshedpolygon + "' #",  tempprotectedlands, "ALL", "", "INPUT")
                protectedcursor = gp.SearchCursor(tempprotectedlands)
                protectedrow = protectedcursor.Next()
                deletevalue = 0
                while (protectedrow):
                    deletevalue += protectedrow.Shape.Area*PROTECTEDFACTOR
                    thevalue = thevalue + (protectedrow.Shape.Area*PROTECTEDFACTOR) #Could multiply a factor here if it is too small
                    protectedrow = protectedcursor.Next()
                    
                myfile.write("Add " + str(deletevalue) + " from the value for protected lands")
                del protectedcursor, protectedrow
            except:
                myfile.write("!!!!!!Failed to run protectedlands\n")
                myfile.write(str(gp.GetMessages()))







            #write the final value to the row
            temprow.SetValue('Value', thevalue)
            thecursor.UpdateRow(temprow)


            del viewpolycursor,temppointcursor, temppointpoint, temppointshape

        except:
            myfile.write("!!!!!!Run Failed for point: " + str(pointcount))
    else:
        print "Skipping point: " + str(pointcount)

    cleanup()
    print "done with point " + str(pointcount)
    pointcount += 1
        
    temprow = thecursor.Next()
